diff --git a/lib/actions/jwks.js b/lib/actions/jwks.js
index 97101583d6c08eb72648d49069487b8d3a273ea4..d43b86b8b59719553bcd32e06a7bc97e59fe5ce6 100644
--- a/lib/actions/jwks.js
+++ b/lib/actions/jwks.js
@@ -1,8 +1,15 @@
 import instance from '../helpers/weak_cache.js';
 
-export default function renderJWKS(ctx, next) {
-  ctx.body = instance(ctx.oidc.provider).jwksResponse;
-  ctx.type = 'application/jwk-set+json; charset=utf-8';
+export default async function renderJWKS(ctx, next) {
+  const customKeyStore = instance(ctx.oidc.provider).configuration("features.customKeyStore");
+
+  if (customKeyStore.enabled) {
+    ctx.body = await customKeyStore.keyStore.jwksResponse();
+  } else {
+    ctx.body = instance(ctx.oidc.provider).jwksResponse;
+  }
+
+  ctx.type = "application/jwk-set+json; charset=utf-8";
 
   return next();
 }
\ No newline at end of file
diff --git a/lib/helpers/defaults.js b/lib/helpers/defaults.js
index b85a6fc58713cddde462b563910216d57cca8045..7a8a4b286d9b61e95765197d0b4dd523753480ca 100644
--- a/lib/helpers/defaults.js
+++ b/lib/helpers/defaults.js
@@ -980,6 +980,14 @@ function makeDefaults() {
        */
       devInteractions: { enabled: true },
 
+
+      /*
+       * features.customKeyStore
+       *
+       * description: Allow to bypass the default key store and use a custom one
+       */
+       customKeyStore: { enabled: false },
+
       /*
        * features.dPoP
        *
diff --git a/lib/helpers/initialize_keystore.js b/lib/helpers/initialize_keystore.js
index 41d508b9c7482d4fd04279b5a01f580597e7baab..1facc6de9f72e4803627716b1f337f5818f6d702 100644
--- a/lib/helpers/initialize_keystore.js
+++ b/lib/helpers/initialize_keystore.js
@@ -205,7 +205,10 @@ function registerKey(key, i, keystore) {
 }
 
 export default function initializeKeystore(jwks) {
-  if (hash(jwks, { respectType: false }) === hash(DEV_KEYSTORE, { respectType: false })) {
+
+  const customKeyStore = instance(this).configuration("features.customKeyStore");
+
+  if (!customKeyStore.enabled && hash(jwks, { respectType: false }) === hash(DEV_KEYSTORE, { respectType: false })) {
     /* eslint-disable no-multi-str */
     attention.warn('a quick start development-only signing keys are used, you are expected to \
 provide your own in configuration "jwks" property');
diff --git a/lib/models/id_token.js b/lib/models/id_token.js
index ee797b09d44ab6c48a48250e28588a250af380f9..a0efe3ae343191b9edf8d677037dc86953f89e56 100644
--- a/lib/models/id_token.js
+++ b/lib/models/id_token.js
@@ -143,6 +143,13 @@ export default function getIdToken(provider) {
         if (typeof alg !== 'string') {
           throw new Error();
         }
+
+        const customKeyStore = instance(provider).configuration("features.customKeyStore");
+        
+        if (customKeyStore.enabled) {
+          return await customKeyStore.keyStore.sign(payload, alg, signOptions);
+        }
+
         let jwk;
         let key;
         if (alg.startsWith('HS')) {
