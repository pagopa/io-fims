@startuml oidc-flow

title Flusso OIDC

autonumber

actor Cittadino as cit
participant "App IO" as app
participant "HTTP Client" as httpclient
participant "In-App Browser" as inappbrowser
participant "OpenID Provider (OP)" as op
participant "io-backend" as be
participant "Relying Party (RP)" as rp
participant "Assertion Provider\n(Resource Server)" as rs

cit->app: Clicca CTA su Messaggio

activate app

note right
CTA contiene
un link verso
RP protetta da OAuth
end note

app->httpclient: Crea
activate httpclient

httpclient->rp: HTTP GET RP
httpclient<--rp: HTTP 302\nHost: oidc.io.pagopa.it \nLocation: /oauth/authorize?response_type=**code**\n&client_id=**IO SERVICE_ID**&scope=**openid profile lollipop**\n&redirect_uri=**REDIRECTION_URI**&state=**STATE**&nonce=**NONCE**

app<--httpclient: HTTP MESSAGE
deactivate httpclient

note left
HTTP MESSAGE contiene
una richiesta valida
di redirect verso OP
end note

app->httpclient: Crea
activate httpclient

httpclient->op: HTTP GET /oauth/authorize?...
activate op

op->be: Richiede User Identity

note left
il flusso prevede due claim, **profile** e **lollipop**,
con **profile** si intende anagrafica utente
con **lollipop** PublicKey, AssertionRef

contestualmente OP conserva anche JWT per scaricare
assertion (da usare in un secondo momento)
end note

op<--be: Restituisce User Identity

op->op: Crea sessione utente

httpclient<--op: HTTP 303 Redirect /oauth/authorize/:id

note left
Dati utente ottenuti,
ma è necessario chiedere
il consenso al trasferimento
dei dati
end note

httpclient->op: HTTP GET /oauth/authorize/:id
httpclient<--op: HTTP 303 Redirect /interactions/:id

httpclient->op: HTTP GET /interactions/:id

note right
HTTP Client aggiunge
l'intestazione "Accept: application/json"
alla richiesta per ottenere una risposta
facile da deserializzare
end note

httpclient<--op: HTTP 200 /interactions/:id
app<--httpclient: HTTP MESSAGE
deactivate httpclient

note right
HTTP MESSAGE contiene
un oggetto JSON che
rappresenta la richiesta
di Consenso alla trasmissione
delle informazioni del Cittadino
end note

cit<--app: Mostra schermata nativa\ncon Richiesta Consenso
cit->app: Acconsente alla\n condivisione dei dati con RP

app->httpclient: Crea
activate httpclient

httpclient->op: HTTP GET /interactions/:id/confirm

op->op: Costruisce **AUTHORIZATION_CODE**

httpclient<--op: HTTP 303 Redirect /oauth/authorize/:id

httpclient->op: HTTP GET /oauth/authorize/:id
httpclient<--op: HTTP 303 /oauth/authorize/:id

deactivate op

note right
La risposta di OP contiene un redirect verso
**REDIRECTION_URI** con **AUTHORIZATION_CODE**, **STATE**
e **NONCE** come query parameters
end note

app<--httpclient: HTTP MESSAGE
deactivate httpclient

note left
HTTP MESSAGE contiene una
"Successful Authentication Response"
con redirect verso RP
end note

== START LOLLIPOP ==

app->app: Firma **CODE** e **NONCE** con PrivateKey

app->httpclient: Crea
activate httpclient

httpclient->rp: Inoltra la "Successful Authentication Response" con **AUTHORIZATION_CODE**

note right
La richiesta HTTP inoltrata contiene
gli header Signature-Input e Signature
end note

rp->op: POST Token Request
activate op

note left
RP consuma il suo
**AUTHORIZATION_CODE**
end note

rp<--op: Restituisce **ID_TOKEN** e **ACCESS_TOKEN**
deactivate op

rp->rp: Ottiene AssertionRef\nda **ID_TOKEN**

rp->rs: GetAssertion
activate rs

note left
**ACCESS_TOKEN** consente a RP di
essere autorizzato a contattare AssertionProvider
end note

rs-->rp: Restituisce Assertion
deactivate rs

note left
RP adesso ha tutto il necessario
per effettuare verifica Lollipop
end note

rp->rp: Verifica firma dell'assertion\ntramite chiave IDP
rp->rp: Verifica periodo di validità\n dell'assertion
rp->rp: Verifica che Thumbprint di AssertionRef\ncorrisponda a quella di chiave pubblica
rp->rp: Confronta AssertionRef con\n InResponseTo di Assertion
rp->rp: Confronta sub di **ID_TOKEN**\n e fiscalNumber di Assertion
rp->rp: Usa chiave pubblica per verificare firma di\n**AUTHORIZATION_CODE** e **NONCE**

rp->rp: Autentica utente

httpclient<--rp: HTTP 302 Redirect

app<--httpclient: HTTP MESSAGE
deactivate httpclient

== END LOLLIPOP ==

note left
HTTP MESSAGE contiene
un link ad una pagina web
di RP, con un query param
per identificare l'utente
autenticato (nonce, uniqueid...)
end note

app->inappbrowser: Apre
activate inappbrowser

inappbrowser->rp: HTTP GET verso pagina restituita da Redirection URI
rp->rp: Identifica utente

inappbrowser<--rp: HTTP 200
deactivate rp

app<-inappbrowser: Mostra pagina web di RP

...Cittadino naviga sul servizio web di RP tramite In-App Browser...

cit->app: Termina la sessione

app->inappbrowser: Chiude
deactivate inappbrowser
deactivate app

@enduml
